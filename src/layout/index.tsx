import React, { useState } from 'react'
import { SessionProvider } from 'next-auth/react'
import { Button, Grid, Layout, Menu, Space, theme } from 'antd'
import HeaderLayout from './header'
import Head from 'next/head'
import { menuItemsLayout } from '@/utils/menuItems'
import type { MenuProps } from 'antd'
import {
  CloseOutlined,
  MenuFoldOutlined,
  MenuUnfoldOutlined,
} from '@ant-design/icons'
import Link from 'next/link'

type MenuItem = Required<MenuProps>['items'][number]

const { Header, Content, Footer, Sider } = Layout

const { useBreakpoint } = Grid

type LayoutProps = {
  children: React.ReactNode
  session: any
  themeMode: any
  onChangeMode: any
  menuKey?: any[]
}

function getItem(
  label: React.ReactNode,
  key: React.Key,
  icon?: React.ReactNode,
  children?: MenuItem[]
): MenuItem {
  return {
    key,
    icon,
    children,
    label,
  } as MenuItem
}

const KbLayout = ({
  children,
  session,
  themeMode,
  onChangeMode,
  menuKey,
}: LayoutProps) => {
  const screens = useBreakpoint()
  const [collapsed, setCollapsed] = useState<any>(screens.xs)
  const {
    token: { colorBgContainer, colorBgLayout },
  } = theme.useToken()

  // get menu item by user role
  const menuItems2 = menuItemsLayout.map((item: any) => {
    let childrens: any[] = []
    if (item.children !== false) {
      item.children.map((childItem: any) =>
        childrens.push(
          getItem(
            <Link href={childItem.path}>{childItem.title}</Link>,
            childItem.key
          )
        )
      )
    }
    return getItem(
      item.children ? item.title : <Link href={item.path}>{item.title}</Link>,
      item.key,
      item.icon,
      item.children === false ? undefined : childrens
    )
  })

  const menuItems: MenuItem[] = menuItems2

  return (
    <>
      <Head>
        <title>Backoffice | Kapital Boost</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <SessionProvider session={session}>
        <Layout style={{ minHeight: '100vh', background: colorBgLayout }}>
          <Sider
            collapsedWidth={
              screens.xs || (screens.sm && screens.xl === false) ? '0' : '80'
            }
            collapsible
            collapsed={collapsed}
            theme={themeMode ? 'dark' : 'light'}
            onCollapse={() => setCollapsed(!collapsed)}
            trigger={
              (screens.xs || (screens.sm && screens.xl === false)) && null
            }
          >
            <div
              style={{
                height: 32,
                margin: 16,
                background: themeMode
                  ? 'rgba(255, 255, 255, 0)'
                  : 'rgba(255, 255, 255, 0.2)',
              }}
            >
              <>
                {collapsed ? (
                  <div className="text-center">
                    <img
                      src={`https://res.cloudinary.com/kbas/image/upload/v1562814584/logo/LOGO-19-19_has4sh.png`}
                      width={`25`}
                      alt={`logo kb`}
                    />
                  </div>
                ) : (
                  <Space align="center" className="space-between">
                    <img
                      src={`https://res.cloudinary.com/kbas/image/upload/v1562814565/logo/LOGO-17_djoes1.png`}
                      height={23}
                      alt={`logo kb`}
                    />
                    {!screens.lg && (
                      <Button
                        type="text"
                        icon={
                          collapsed ? <MenuUnfoldOutlined /> : <CloseOutlined />
                        }
                        onClick={() => setCollapsed(!collapsed)}
                        style={{
                          fontSize: '16px',
                          padding: '0',
                        }}
                      />
                    )}
                  </Space>
                )}
              </>
            </div>
            <Menu
              theme={themeMode ? 'dark' : 'light'}
              defaultSelectedKeys={menuKey ? menuKey : []}
              mode="inline"
              items={menuItems}
            />
          </Sider>
          <Layout className="site-layout">
            <Header
              style={{
                padding: '0 20px 0 0',
                background: colorBgContainer,
              }}
            >
              <Space className="space-between">
                {screens.xs || (screens.sm && screens.xl === false) ? (
                  <Button
                    type="text"
                    icon={
                      collapsed ? <MenuUnfoldOutlined /> : <MenuFoldOutlined />
                    }
                    onClick={() => setCollapsed(!collapsed)}
                    style={{
                      fontSize: '16px',
                      width: 64,
                      height: 64,
                    }}
                  />
                ) : (
                  <>&nbsp;</>
                )}
                <HeaderLayout onChangeMode={onChangeMode} />
              </Space>
            </Header>
            <Content
              style={{
                margin: screens.xs || screens.sm ? '0 8px' : '0 16px',
                background: colorBgLayout,
              }}
            >
              <div
                style={{
                  padding: '0px',
                  marginTop: 16,
                  minHeight: 360,
                }}
              >
                {children}
              </div>
            </Content>
            <Footer style={{ textAlign: 'center' }}>
              &copy; Kapital Boost &#183; 2024 <br /> {`Developed by Tech Team`}
            </Footer>
          </Layout>
        </Layout>
      </SessionProvider>
    </>
  )
}

export default KbLayout
