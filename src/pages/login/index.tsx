import {
  Col,
  Row,
  Button,
  Modal,
  Form,
  Input,
  Space,
  Alert,
  notification,
  Grid,
  Typography,
} from 'antd'
import { useEffect, useState } from 'react'
import Head from 'next/head'
// import ForgotPassword from './forgotPassword'

import { signIn } from 'next-auth/react'
import Router from 'next/router'
import { LoginOutlined, ReloadOutlined } from '@ant-design/icons'
import { isMobile, isDesktop, isTablet } from '@/utils/screen'

const { useBreakpoint } = Grid

interface Props {
  without_layout: boolean
}

const Login = ({ without_layout }: Props) => {
  const [isModalOpen, setIsModalOpen] = useState(false)
  const [error, setError] = useState('')
  const [loading, setLoading] = useState(false)

  const screens = useBreakpoint()

  useEffect(() => {
    console.log('Mobile >> ', isMobile(screens))
    console.log('Tablet >> ', isTablet(screens))
    console.log('Desktop >> ', isDesktop(screens))
  })

  const onFinish = async (values: any) => {
    setError('')
    setLoading(true)

    const result = await signIn('credentials', {
      email: values.email,
      password: values.password,
      redirect: false,
      callbackUrl: '/',
    })

    setLoading(false)

    if (result?.error === 'CredentialsSignin') {
      setError('Email or Password is Wrong')
    } else {
      notification.success({
        message: 'Login Success',
      })

      if (result?.url) {
        Router.push(result?.url)
      }
    }
  }

  const onFinishFailed = (errorInfo: any) => {
    console.log('Failed:', errorInfo)
  }

  const handleOk = () => {
    setIsModalOpen(false)
  }

  const handleCancel = () => {
    setIsModalOpen(false)
  }

  return (
    <>
      <Head>
        <title>Login | Kapital Boost</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main data-page="login">
        <section
          style={{ width: screens.md ? '85vw' : '100vw', margin: 'auto' }}
        >
          <Row
            align={screens.xs || (screens.sm && !screens.md) ? 'top' : 'middle'}
            style={{ height: screens.md ? '100vh' : 'auto' }}
          >
            <Col sm={24} md={24} lg={16} xl={16} className="text-center">
              {screens.md ? (
                <img
                  className="illus hide-on-mobile"
                  src={
                    'https://res.cloudinary.com/kbas/image/upload/v1677120908/Illustration/illustration_opbic0.svg'
                  }
                  alt="Illustration"
                  width={'60%'}
                  style={{
                    margin: 'auto',
                  }}
                />
              ) : (
                <img
                  className="text-center"
                  src={
                    'https://res.cloudinary.com/kbas/image/upload/v1562814565/logo/LOGO-17_djoes1.png'
                  }
                  alt="Illustration"
                  width={'75%'}
                  style={{
                    margin: 'auto',
                    marginBottom: '15px',
                    padding: '100px 0 10px',
                  }}
                />
              )}
            </Col>

            <Col sm={24} md={24} lg={8} xl={8} className="login-form">
              <Space direction="vertical">
                <Typography.Title
                  level={1}
                  className={`m-0 text-center-on-mobile`}
                >
                  Sign In
                </Typography.Title>

                <p
                  className={`m-0 text-center-on-mobile`}
                  style={{ fontSize: '1.2rem' }}
                >{`Assalamu'alaikum KB's Team`}</p>

                <Form
                  name="basic"
                  style={{ marginTop: 25 }}
                  initialValues={{ remember: true }}
                  onFinish={onFinish}
                  onFinishFailed={onFinishFailed}
                  autoComplete="off"
                  layout="vertical"
                >
                  {error !== '' && <Alert message={error} type="error" />}
                  <br />
                  <Form.Item
                    label="Email"
                    name="email"
                    rules={[
                      { required: true, message: 'Please input your email!' },
                    ]}
                  >
                    <Input size="large" />
                  </Form.Item>

                  <Form.Item
                    label="Password"
                    name="password"
                    rules={[
                      {
                        required: true,
                        message: 'Please input your password!',
                      },
                    ]}
                  >
                    <Input.Password size="large" />
                  </Form.Item>

                  {/* <Form.Item>
                  <Button
                    type="link"
                    onClick={() => setIsModalOpen(!isModalOpen)}
                    className="p-0"
                  >
                    Forgot password?
                  </Button>
                </Form.Item> */}

                  <Form.Item>
                    <Space>
                      <Button
                        type="primary"
                        htmlType="submit"
                        loading={loading}
                        icon={<LoginOutlined />}
                        style={{ width: '175px' }}
                      >
                        Login
                      </Button>

                      <Button htmlType="reset" icon={<ReloadOutlined />}>
                        Reset
                      </Button>
                    </Space>
                  </Form.Item>
                </Form>
              </Space>
            </Col>
          </Row>
        </section>

        {/* <Modal
          title="Forgot Password"
          open={isModalOpen}
          onOk={handleOk}
          onCancel={handleCancel}
          footer={null}
        >
          <ForgotPassword handleClose={handleCancel} />
        </Modal> */}
      </main>
    </>
  )
}

export default Login

export const getServerSideProps = async () => {
  return {
    props: {
      without_layout: true,
    },
  }
}
